# VPS Setup library of utlity functions and procedures
#
# Copyright (C) 2020 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
# License: GPLv3 or later, at your choice. See <http://www.gnu.org/licenses/gpl>
#
# To be sourced by all scripts.
# Add the following header:
#	vpslib=$(dirname "$(readlink -f "$0")")/../vpslib
#	if [[ -r "$vpslib" ]]; then source "$vpslib"; else
#		echo "VPS Setup library not found: $(readlink -f "$vpslib")" >&2
#		echo "Usage: ${0##*/} [CONFIG_FILE]" >&2
#		exit 1
#	fi
###############################################################################

set -Eeuo pipefail
trap 'error "line $LINENO, status $?: $BASH_COMMAND"' ERR

#------------------------------------------------------------------------------

VPS_CONFIG=${VPS_CONFIG:-"/etc/vps/vps.conf"}  # can't use VPS_SLUG here
if [[ -r "$VPS_CONFIG" ]]; then
	set -a  # Export all non-array vars in config. Just for the check below
	source "$VPS_CONFIG"
	set +a
fi

VPS_VERBOSE=${VPS_VERBOSE:-1}
VPS_DEBUG=${VPS_DEBUG:-0}
VPS_BATCH=${VPS_BATCH:-0}
VPS_SLUG=${VPS_SLUG:-"vpssetup"}

#------------------------------------------------------------------------------

try()     { "$@" 2>/dev/null || :; }
bold()    { try tput bold; printf '%s' "$@"; try tput sgr0; echo; }
color()   { if (($# > 1)); then try tput setaf "$1"; shift; bold "$@"; fi; }
red()     { color 1 "$@"; }
green()   { color 2 "$@"; }
yellow()  { color 3 "$@"; }
blue()    { color 4 "$@"; }
fatal()   { red "${0##*/}: fatal${1:+: $@}" >&2; exit 1; }
error()   { red           "error${1:+: $@}" >&2; }
warning() { yellow      "warning${1:+: $@}" >&2; }
message() { if ((VPS_VERBOSE)); then green "* $@"; fi; }
debugmsg(){ if ((VPS_DEBUG)); then echo       "$@" >&2; fi; }
debugvar(){ if ((VPS_DEBUG)); then declare -p "$@" >&2; fi; }

#------------------------------------------------------------------------------

if ! ((VPS_BATCH)); then message "Config file: $VPS_CONFIG"; fi
env | grep -q '^VPS_' 2>/dev/null ||
	fatal "No config vars set. Check config file: $VPS_CONFIG"


#------------------------------------------------------------------------------

now() { date +%Y%m%d%H%M%S; }
exists() { type "$@" >/dev/null 2>&1; }
is_root() { [[ "$(id -u)" -eq 0 ]]; }
bakfile() { echo "${1:-}.${VPS_SLUG:-}.$(now).bak"; }
backup_file() { cp -p --no-clobber -- "${1:-}" "${2:-$(bakfile "${1:-}")}"; }
user_exists() { id "${1:-}" &>/dev/null; }
require_root() { is_root || fatal "You must run this as root"; }
userhome() { sudo -u "${1:-$USER}" -H -s eval 'echo "$HOME"'; }

package_version() {
	dpkg-query --showformat='${Version}' --show "$1" 2>/dev/null
}
package_installed() {
	package_version "$1" >/dev/null;
}
package_install() {
	# Install all non-existing packages in a single command
	# Usage: package_install [PACKAGE...]
	local pkg=
	local pkgs=()
	for pkg in "$@"; do
		if ! package_installed "$pkg"; then pkgs+=( "$pkg" ); fi
	done
	if (("${#pkgs[@]}")); then
		sudo apt install -y "${pkgs[@]}"
	fi
}
